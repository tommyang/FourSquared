"use strict";var rootScope,toaster,$compile;describe("toasterContainer controller",function(){beforeEach(function(){module("toaster"),inject(function(e,t,o){toaster=e,rootScope=t,$compile=o})}),it("should stop timer if config.mouseoverTimer is true",function(){var e=angular.element("<toaster-container toaster-options=\"{ 'mouseover-timer-stop': true }\"></toaster-container>");$compile(e)(rootScope),rootScope.$digest();var t=e.scope();expect(t.config.mouseoverTimer).toBe(!0),toaster.pop({type:"info"}),rootScope.$digest(),expect(t.toasters[0].timeoutPromise).toBeDefined(),t.stopTimer(t.toasters[0]),rootScope.$digest(),expect(t.toasters[0].timeoutPromise).toBe(null)}),it("should do nothing if config.mouseoverTimer is true and stopTimer is called again",function(){var e=angular.element("<toaster-container toaster-options=\"{ 'mouseover-timer-stop': true }\"></toaster-container>");$compile(e)(rootScope),rootScope.$digest();var t=e.scope();expect(t.config.mouseoverTimer).toBe(!0),toaster.pop({type:"info"}),rootScope.$digest(),t.stopTimer(t.toasters[0]),rootScope.$digest(),expect(t.toasters[0].timeoutPromise).toBe(null),t.stopTimer(t.toasters[0]),rootScope.$digest(),expect(t.toasters[0].timeoutPromise).toBe(null)}),it("should not stop timer if config.mouseoverTimer is false",function(){var e=angular.element("<toaster-container toaster-options=\"{ 'mouseover-timer-stop': false }\"></toaster-container>");$compile(e)(rootScope),rootScope.$digest();var t=e.scope();expect(t.config.mouseoverTimer).toBe(!1),toaster.pop({type:"info"}),rootScope.$digest(),expect(t.toasters[0].timeoutPromise).toBeDefined(),t.stopTimer(t.toasters[0]),rootScope.$digest(),expect(t.toasters[0].timeoutPromise).toBeDefined()}),it("should restart timer if config.mouseoverTimer is true and timeoutPromise is falsy",function(){var e=angular.element("<toaster-container toaster-options=\"{ 'mouseover-timer-stop': true }\"></toaster-container>");$compile(e)(rootScope),rootScope.$digest();var t=e.scope();toaster.pop({type:"info"}),rootScope.$digest(),expect(t.toasters[0].timeoutPromise).toBeDefined(),t.stopTimer(t.toasters[0]),expect(t.toasters[0].timeoutPromise).toBe(null),t.restartTimer(t.toasters[0]),expect(t.toasters[0].timeoutPromise).toBeDefined()}),it("should not restart timer if config.mouseoverTimer is true and timeoutPromise is truthy",function(){var e=angular.element("<toaster-container toaster-options=\"{ 'mouseover-timer-stop': true }\"></toaster-container>");$compile(e)(rootScope),rootScope.$digest();var t=e.scope();toaster.pop({type:"info"}),rootScope.$digest(),expect(t.toasters[0].timeoutPromise).toBeDefined(),spyOn(t,"configureTimer").and.callThrough(),t.restartTimer(t.toasters[0]),expect(t.toasters[0].timeoutPromise).toBeDefined(),expect(t.configureTimer).not.toHaveBeenCalled()}),it("should not restart timer and should remove toast if config.mouseoverTimer is not true and timeoutPromise is null",function(){var e=angular.element("<toaster-container toaster-options=\"{ 'mouseover-timer-stop': 2 }\"></toaster-container>");$compile(e)(rootScope),rootScope.$digest();var t=e.scope();toaster.pop({type:"info"}),rootScope.$digest(),expect(t.config.mouseoverTimer).toBe(2),t.toasters[0].timeoutPromise=null,spyOn(t,"configureTimer").and.callThrough(),spyOn(t,"removeToast").and.callThrough(),t.restartTimer(t.toasters[0]),expect(t.configureTimer).not.toHaveBeenCalled(),expect(t.removeToast).toHaveBeenCalled(),expect(t.toasters.length).toBe(0)}),it("should not restart timer or remove toast if config.mouseoverTimer is not true and timeoutPromise is not null",function(){var e=angular.element("<toaster-container toaster-options=\"{ 'mouseover-timer-stop': 2 }\"></toaster-container>");$compile(e)(rootScope),rootScope.$digest();var t=e.scope();toaster.pop({type:"info"}),rootScope.$digest(),expect(t.config.mouseoverTimer).toBe(2),spyOn(t,"configureTimer").and.callThrough(),spyOn(t,"removeToast").and.callThrough(),t.restartTimer(t.toasters[0]),expect(t.configureTimer).not.toHaveBeenCalled(),expect(t.removeToast).not.toHaveBeenCalled(),expect(t.toasters.length).toBe(1)}),describe("click",function(){it("should do nothing if config.tap is not true and toast.showCloseButton is not true",function(){var e=angular.element("<toaster-container toaster-options=\"{ 'tap-to-dismiss': false, 'close-button': false }\"></toaster-container>");$compile(e)(rootScope),rootScope.$digest();var t=e.scope();spyOn(t,"removeToast").and.callThrough(),toaster.pop({type:"info"}),rootScope.$digest(),t.click(t.toasters[0]),expect(t.toasters.length).toBe(1),expect(t.removeToast).not.toHaveBeenCalled()}),it("should do nothing if config.tap is not true and toast.showCloseButton is true",function(){var e=angular.element("<toaster-container toaster-options=\"{ 'tap-to-dismiss': false, 'close-button': true }\"></toaster-container>");$compile(e)(rootScope),rootScope.$digest();var t=e.scope();spyOn(t,"removeToast").and.callThrough(),toaster.pop({type:"info"}),rootScope.$digest(),t.click(t.toasters[0]),expect(t.toasters.length).toBe(1),expect(t.removeToast).not.toHaveBeenCalled()}),it("should do nothing if config.tap is not true and isCloseButton is not true",function(){var e=angular.element("<toaster-container toaster-options=\"{ 'tap-to-dismiss': false, 'close-button': true }\"></toaster-container>");$compile(e)(rootScope),rootScope.$digest();var t=e.scope();spyOn(t,"removeToast").and.callThrough(),toaster.pop({type:"info"}),rootScope.$digest(),t.click(t.toasters[0],!1),expect(t.toasters.length).toBe(1),expect(t.removeToast).not.toHaveBeenCalled()}),it("should remove toast if config.tap is true",function(){var e=angular.element("<toaster-container toaster-options=\"{ 'tap-to-dismiss': true, 'close-button': true }\"></toaster-container>");$compile(e)(rootScope),rootScope.$digest();var t=e.scope();spyOn(t,"removeToast").and.callThrough(),toaster.pop({type:"info"}),rootScope.$digest(),t.click(t.toasters[0]),expect(t.toasters.length).toBe(0),expect(t.removeToast).toHaveBeenCalled()}),it("should remove toast if config.tap is true and the click handler function returns true",function(){var e=angular.element("<toaster-container toaster-options=\"{ 'tap-to-dismiss': true, 'close-button': true }\"></toaster-container>");$compile(e)(rootScope),rootScope.$digest();var t=e.scope();spyOn(t,"removeToast").and.callThrough(),toaster.pop({type:"info",clickHandler:function(e,t){return!0}}),rootScope.$digest(),t.click(t.toasters[0]),expect(t.toasters.length).toBe(0),expect(t.removeToast).toHaveBeenCalled()}),it("should not remove toast if config.tap is true and the click handler function does not return true",function(){var e=angular.element("<toaster-container toaster-options=\"{ 'tap-to-dismiss': true, 'close-button': true }\"></toaster-container>");$compile(e)(rootScope),rootScope.$digest();var t=e.scope();spyOn(t,"removeToast").and.callThrough(),toaster.pop({type:"info",clickHandler:function(e,t){}}),rootScope.$digest(),t.click(t.toasters[0]),expect(t.toasters.length).toBe(1),expect(t.removeToast).not.toHaveBeenCalled()}),it("should remove toast if config.tap is true and the click handler exists on the parent returning true",function(){var e=angular.element("<toaster-container toaster-options=\"{ 'tap-to-dismiss': true, 'close-button': true }\"></toaster-container>");$compile(e)(rootScope),rootScope.$digest();var t=e.scope();t.$parent.clickHandler=function(){return!0},spyOn(t,"removeToast").and.callThrough(),toaster.pop({type:"info",clickHandler:"clickHandler"}),rootScope.$digest(),t.click(t.toasters[0]),expect(t.toasters.length).toBe(0),expect(t.removeToast).toHaveBeenCalled()}),it("should not remove toast if config.tap is true and the click handler exists on the parent not returning true",function(){var e=angular.element("<toaster-container toaster-options=\"{ 'tap-to-dismiss': true, 'close-button': true }\"></toaster-container>");$compile(e)(rootScope),rootScope.$digest();var t=e.scope();t.$parent.clickHandler=function(){},spyOn(t,"removeToast").and.callThrough(),toaster.pop({type:"info",clickHandler:"clickHandler"}),rootScope.$digest(),t.click(t.toasters[0]),expect(t.toasters.length).toBe(1),expect(t.removeToast).not.toHaveBeenCalled()}),it("should remove toast if config.tap is true and the click handler does not exist on the parent",function(){var e=angular.element("<toaster-container toaster-options=\"{ 'tap-to-dismiss': true, 'close-button': true }\"></toaster-container>");$compile(e)(rootScope),rootScope.$digest();var t=e.scope();spyOn(t,"removeToast").and.callThrough(),console.log=jasmine.createSpy("log"),toaster.pop({type:"info",clickHandler:"clickHandler"}),rootScope.$digest(),t.click(t.toasters[0]),expect(t.toasters.length).toBe(0),expect(t.removeToast).toHaveBeenCalled(),expect(console.log).toHaveBeenCalledWith("TOAST-NOTE: Your click handler is not inside a parent scope of toaster-container.")})})});